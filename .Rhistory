city.mds2<-metaMDS(city, distance="euclidean", k=2)
city.mds3<-metaMDS(city, distance="euclidean", k=3)
city.mds4<-metaMDS(city, distance="euclidean", k=4)
stress=c(city.mds1$stress, city.mds2$stress, city.mds3$stress, city.mds4$stress)
plot(c(1:4),stress,col="blue",lwd=3, type="b", xlab="Dimensions")
plot(city.mds2,type="t", cex=1.2,)
spidercount <- read.delim("http://reuningscherer.net/stat660/data/sqrtspidercount.txt", sep="\t", row.names=1)
spiderenv <- read.delim("http://reuningscherer.net/stat660/data/spiderenvironmentalvars.txt", sep="\t", row.names=1)
library(vegan)
spiderca<-cca(spidercount)
plot(spiderca,main="Correspondence Analysis for Spider Data",type="n")
points(spiderca, pch=19, col="black", cex=1)
text(spiderca, "species", col="blue", cex=1.1)
fit<-envfit(spiderca, spiderenv,permutations=1000)
plot(fit,col="red",lwd=3)
fit
spiderdca<-decorana(spidercount)
plot(spiderdca,main="DCA for Spider Data",type="n")
points(spiderdca, pch=19, col="black", cex=1)
text(spiderdca, "species", col="blue", cex=1.1)
fit<-envfit(spiderdca, spiderenv,permutations=1000)
plot(fit,col="red",lwd=3)
spidermds<-metaMDS(spidercount)
plot(spidermds,main="NMDS for Spider Data",type="n")
points(spidermds, pch=19, col="black", cex=1)
text(spidermds, "species", col="blue", cex=1.1)
fit<-envfit(spidermds, spiderenv,permutations=1000)
plot(fit,col="red",lwd=3)
spidercca<-cca(spidercount,spiderenv,scale="FALSE")
plot(spidercca)
plot(spidercca,main="CCA for Spider Data",type="n")
points(spidercca, pch=19, col="black", cex=1)
text(spidercca, "species", col="blue", cex=1.1)
fit<-envfit(spidercca, spiderenv,permutations=1000)
plot(fit,col="red",lwd=3)
fit
summary(spidercca)
spidernmds<-metaMDS(spidercount)
fit1<-envfit(spidernmds~BareSand+FallTwig, spiderenv)
fit2<-envfit(spidernmds~WaterCon+CoveMoss, spiderenv)
fig<-ordiplot(spidernmds,type="none",cex=1.1,main="NMDS for Spider Data")
text(fig,"species",col="red",cex=0.7)
text(fig,"sites",col="black",cex=0.7)
plot(fit1)
tmp1 <- with(spiderenv, ordisurf(spidernmds, BareSand, add = TRUE))
tmp2<-with(spiderenv, ordisurf(spidernmds, FallTwig, add = TRUE, col = "green4"))
fig<-ordiplot(spidernmds,type="none",cex=1.1,main="NMDS for Spider Data")
text(fig,"species",col="red",cex=0.7)
text(fig,"sites",col="black",cex=0.7)
plot(fit2)
tmp1 <- with(spiderenv, ordisurf(spidernmds, WaterCon, add = TRUE))
tmp2<-with(spiderenv, ordisurf(spidernmds, CoveMoss, add = TRUE, col = "green4"))
vis.gam(tmp1,main="BareSand")
vis.gam(tmp2,main="FallTwig")
install.packages("RXKCD", repos="http://R-Forge.R-project.org", type="source")
searchXKCD("support")
install.packages("RXKCD")
searchXKCD("support")
?RXKCD
require(MASS)
library(animation)
install.packages("animation")
library(animation)
mkmovie = TRUE  #guarantees some form of output
param <- c(50-30i,18+8i,12-10i,-14-60i,1+20i)
parar <- param * exp(1i*pi/2)  #rotate by 90 degrees
pinky <- function() {
Cx <- as.complex(rep(0,length(param)))
Cy <- as.complex(rep(0,length(param)))
tv <- seq(0,2*pi,length=1000)
for (i in 1:2) { #movie frames
Cx[1] <- parar[1] + Im(param[1])
Cx[2] <- parar[2] + Im(param[2])
Cx[3] <- Re(param[3])
Cx[4] <- Re(param[5]) - (i-1)
Cx[5] <- Re(param[4])
Cy[1] <- param[1] - Re(param[1]) + Im(param[4])
Cy[2] <- param[2] - Re(param[2])
Cy[3] <- param[3] - Re(param[3])
x <- c(fourier(tv, Cx))
y <- c(fourier(tv, Cy))
plot(y, -x, type="l", col='red', lwd=10, axes=FALSE, ylab='', xlab='')
lines(y, -x, type="l", col='pink', lwd=4)
if (i > 1) points(Im(param[5]), Im(param[5]), col='black', pch=126, cex=2)
else points(Im(param[5]), Im(param[5]), col='black', pch=20, cex=2)
}
}
fourier <- function(tt,cc) {
wt <- rep(0, length(tt))
fsum <- function(n) {
if (n > 0) wt <- wt + fsum(n-1) + Re(cc[n]) * cos(n*tt) + Im(cc[n]) * sin(n*tt)
return(wt)
}
fsum(length(cc))
}
if (mkmovie) {
aopt = ani.options(interval = 0, nmax = 2)
saveMovie(pinky(), interval = 0.25, outdir = getwd(), width = 400, height = 400)
ani.options(aopt)
} else pinky()
pinky
t <- q[,-c(1,39)]
corrmat <- round(cor(t),2)
names()
data()
x <- esoph
table(x$ncases)
iris
head(mtcars)
table(mtcars$vs)
x <- mtcars
?rename
x$manual <- x$am
x <- mtcars
colname(x)[9] <- "manual"
colnames(x)[9] <- "manual"
lm.1 <- lm(manual ~ mpg, data=x)
plot(manual ~ mpg, data=x)
plot(mpg ~ manual, data=x)
lm.1 <- lm(mpg ~ manual, data=x)
summary(lm.1)
lm.2 <- lm(manual~mpg, data=x)
summary(lm.2)
summary(lm.1)
setwd(~Desktop/predict_2000election)
setwd()
library(datasets)
data("iris")
data(iris)
?iris
x <- iris
iris$Sepal.Length
mean(iris$Sepal.Length[iris$Species=="virginica"])
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 2, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
x <- mtcars
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$hp, mtcars$cyl, mean)
av <- tapply(mtcars$hp, mtcars$cyl, mean)
av
absdiff <- av[3] - av[1]
absdiff
debug(ls)
?ls
ls()
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("shiny")
install_github("StatsWithR/statsr")
library(dplyr)
library(ggplot2)
library(statsr)
library(dplyr)
data(arbuthnot)
str(arbuthnot)
arbuthnot
arbuthnot$boys
arbuthnot$girls
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = girls)) +
geom_point()
?ggplot
5218 + 4683
arbuthnot$boys + arbuthnot$girls
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
boxplot(arbuthnot$boys)
dev.off()
ggplot(data = arbuthnot, aes(x = year, y = total)) +
geom_line() +
geom_point()
ggplot(data = arbuthnot, aes(x = year, y = boys/total)) +
geom_line() +
geom_point()
arbuthnot <- arbuthnot %>%
mutate(more_boys = boys > girls)
data(present)
str(present)
summary(present$year)
range(present$year)
present <- present %>%
mutate(prop_boys = boys / total)
present <- present %>%
mutate(total = boys + girls)
present <- present %>%
mutate(prop_boys = boys / total)
present <- present %>%
mutate(more_boys = boys > girls)
present <- present %>%
mutate(prop_boy_girl = boys / girls)
installed.packages()
`.packages = c("foreign", "plyr", "countrycode", "WDI")
n
>
vr>3
--
q
=c
``
`
.packages = c("foreign", "plyr", "countrycode", "WDI")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst],repos='http://cran.us.r-project.org')
?Random
library(Rgbp)
.packages = c("foreign", "plyr", "countrycode", "WDI", "Rgbp")
library("Rgbp")
.inst <- .packages %in% installed.packages()
if(length(.packages[!.inst]) > 0) install.packages(.packages[!.inst],repos='http://cran.us.r-project.org')
library(Rgbp)
libary(MASS)
install.packages("MASS")
install.packages("ISLR")
arrest <- USArrests
View(arrest)
library(ISLR)
a <- Advertising
Library(MASS)
library(MASS)
ISLR
data(package = "ISLR")
data(package = "MASS")
library(downloader)
library(dplyr)
library(UsingR)
library(gapminder)
data(gapminder)
head(gapminder)
tail(gapminder)
x <- gapminder %>% filter(year == 1952) %>% hist(lifeExp)
x <- gapminder %>% filter(year == 1952)
hist(x$lifeExp)
x <- gapminder %>% filter(year == 1952) %>% unlist()
x <- gapminder %>% filter(year == 1952)
unique(x$country)
length(unique(x$country))
length(which(x$lifeExp >= 40))/142
length(which(x$lifeExp <= 40))/142
length(which(x$lifeExp <= 60))/142
0.7535211 - 0.2887324
plot(ecdf(x$lifeExp))
prop = function(q) {
mean(x <= q)
}
prop(40)
qs = seq(from=min(x), to=max(x), length=20)
props = sapply(qs, function(q) mean(x <= q))
qs = seq(from=min(x), to=max(x), length=20)
prop = function(q) {
mean(x <= q)
}
prop(40)
qs = seq(from = min(x), to = max(x), length = 20)
prop = function(q) {
mean(x$lifeExp <= q)
}
prop(40)
qs = seq(from = min(x$lifeExp), to = max(x$lifeExp), length = 20)
props = sapply(qs, prop)
plot(qs, props)
props = sapply(qs, function(q) mean(x$lifeExp <= q))
props = sapply(qs, function(q) mean(x$lifeExp <= q))
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
set.seed(1)
n <- 10000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 5)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/10000
set.seed(1)
n <- 10000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 5)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
population <- read.csv(filename)
population <- unlist(population) # turn it into a numeric
mean(population)
set.seed(1)
n <- 1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 5)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
set.seed(1)
n <- 1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 50)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 5)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
hist(null)
set.seed(1)
n <- 1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 50)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
hist(null)
length(unique(population))
hist(null)
length(unique(population))
set.seed(1)
n <- 1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 50)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
hist(null)
length(unique(population))
length(which(population <= 25)) / 208
length(which(population >= 23)) / 208
0.7307692 - 0.6394231
length(unique(null))
length(which(null <= 25)) / 1000
length(which(null >= 23)) / 1000
hist(null)
length(which(null <= 25)) / 1000
length(which(population <= 25)) / 1000
length(which(population <= 23)) / 1000
0.152 - 0.092
population <- read.csv(filename)
population <- unlist(population) # turn it into a numeric
set.seed(1)
n <- 1000
null <- vector("numeric", n)
for (i in 1:n) {
control <- sample(population, 50)
null[i] <- mean(population) - mean(control)
}
abs <- abs(null)
length(which(abs > 1))/1000
hist(null)
length(which(population <= 25)) / 1000
length(which(population <= 23)) / 1000
(length(which(population <= 25)) / 1000) - (length(which(population <= 23)) / 1000)
(length(which(null <= 25)) / 1000) - (length(which(null <= 23)) / 1000)
hist(null)
(length(which(null <= 25)) / 50) - (length(which(null <= 23)) / 50)
(length(which(control <= 25)) / 50) - (length(which(control <= 23)) / 50)
mean( null < 25 & null > 23)
?norm
?qnorm
rnorm(50, mean = 23.9, sd = 0.43)
set.seed(1)
norm <- rnorm(50, mean = 23.9, sd = 0.43)
1/50
norm
norm <- rnorm(50, mean = 23.9, sd = 0.43)
norm
norm <- dnorm(50, mean = 23.9, sd = 0.43)
norm
norm <- rnorm(50, mean = 23.9, sd = 0.43)
norm
pnorm((25 - 23.9) / 0.43)  - pnorm((23 - 23.9) / 0.43)
install.packages("spotifyr")
library(spotifyr)
library(lubridate)
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
library(tidyverse)
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'a2e495d72f494a75b751f6b0fcb714a1')
Sys.setenv(SPOTIFY_CLIENT_ID = 'f4b5202c4f6147b68cd8c9154c215738')
access_token <- get_spotify_access_token()
get_my_recently_played(limit = 5) %>%
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
mutate(artist.name = map_chr(track.artists, function(x) x$name[1]),
played_at = as_datetime(played_at)) %>%
select(track.name, artist.name, track.album.name, played_at) %>%
kable()
?get_my_recently_played
get_my_recently_played(limit = 5)
get_my_recently_played(limit = 5, authorization = get_spotify_authorization_code(),)
?get_artist_audio_features
beatles <- get_artist_audio_features('the beatles', authorization = get_spotify_access_token())
get_my_recently_played(limit = 5, authorization = get_spotify_authorization_code(),)
beatles <- get_artist_audio_features('ttaylor swift', authorization = access_token)
beatles <- get_artist_audio_features('taylor swift', authorization = access_token)
taytay <- get_artist_audio_features('taylor swift', authorization = access_token)
get_my_recently_played(limit = 5, authorization = access_token)
#install.packages("spotifyr")
library(spotifyr)
library(lubridate)
library(tidyverse)
Sys.setenv(SPOTIFY_CLIENT_ID = 'f4b5202c4f6147b68cd8c9154c215738')
Sys.setenv(SPOTIFY_CLIENT_SECRET = 'a2e495d72f494a75b751f6b0fcb714a1')
access_token <- get_spotify_access_token()
taytay <- get_artist_audio_features('taylor swift', authorization = access_token)
get_my_recently_played(limit = 5, authorization = access_token)
devtools::install_github('charlie86/spotifyr')
install.packages("devtools")
devtools::install_github('charlie86/spotifyr')
get_my_recently_played(limit = 5, authorization = access_token)
taytay$album_name
table(taytay$album_name)
taytay <- taytay %>% filter(album_name == "Taylor Swift" | album_name == "Fearless Platinum Edition" |
album_name == "Speak Now" | album_name == "Red" |
album_name == "1989" | album_name == "reputation" | album_name == "Lover")
# genius
genius_get_artists <- function(artist_name, n_results = 10) {
baseURL <- 'https://api.genius.com/search?q='
requestURL <- paste0(baseURL, gsub(' ', '%20', artist_name),
'&per_page=', n_results,
'&access_token=', access_token)
res <- GET(requestURL) %>% content %>% .$response %>% .$hits
map_df(1:length(res), function(x) {
tmp <- res[[x]]$result$primary_artist
list(
artist_id = tmp$id,
artist_name = tmp$name
)
}) %>% unique
}
genius_artists <- genius_get_artists('taylor swift')
res <- get(requestURL) %>% content %>% .$response %>% .$hits
# genius
genius_get_artists <- function(artist_name, n_results = 10) {
baseURL <- 'https://api.genius.com/search?q='
requestURL <- paste0(baseURL, gsub(' ', '%20', artist_name),
'&per_page=', n_results,
'&access_token=', access_token)
res <- get(requestURL) %>% content %>% .$response %>% .$hits
map_df(1:length(res), function(x) {
tmp <- res[[x]]$result$primary_artist
list(
artist_id = tmp$id,
artist_name = tmp$name
)
}) %>% unique
}
genius_artists <- genius_get_artists('taylor swift')
View(taytay)
baseURL <- 'https://api.genius.com/artists/'
requestURL <- paste0(baseURL, genius_artists$artist_id[1], '/songs')
genius_artists <- genius_get_artists('taylor swift')
install.packages("installr")
install_tensorflow(version = "1.4")
setwd("/Users/katdevlin/Desktop/blog/KatDevlin.github.io")
# render your site.
rmarkdown::render_site()
